name: Build Android TV App

on:
  push:
    branches: [ main, develop, fix/compile-errors ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup hiddify-core dependency
      run: |
        echo "📥 Setting up hiddify-core dependency..."
        
        # Crear directorio libcore si no existe
        mkdir -p libcore
        
        # Verificar si ya existe contenido en libcore
        if [ -d "libcore" ] && [ "$(ls -A libcore)" ]; then
          echo "✅ libcore directory already has content"
          ls -la libcore/ | head -5
        else
          echo "📥 Downloading hiddify-core..."
          
          # Intentar descargar hiddify-core
          download_success=false
          
          # Método 1: Git clone
          if ! $download_success; then
            echo "🔄 Trying git clone..."
            if git clone --depth 1 https://github.com/hiddify/hiddify-core.git temp-hiddify-core; then
              cp -r temp-hiddify-core/* libcore/ 2>/dev/null || true
              rm -rf temp-hiddify-core
              download_success=true
              echo "✅ Git clone successful"
            fi
          fi
          
          # Método 2: Wget tar.gz
          if ! $download_success; then
            echo "🔄 Trying wget tar.gz..."
            if wget -q --timeout=30 -O hiddify-core.tar.gz \
               "https://github.com/hiddify/hiddify-core/archive/refs/heads/main.tar.gz"; then
              tar -xzf hiddify-core.tar.gz
              if [ -d "hiddify-core-main" ]; then
                cp -r hiddify-core-main/* libcore/ 2>/dev/null || true
                download_success=true
                echo "✅ Wget tar.gz successful"
              fi
              rm -rf hiddify-core.tar.gz hiddify-core-main
            fi
          fi
          
          # Método 3: Curl fallback
          if ! $download_success; then
            echo "🔄 Trying curl fallback..."
            if curl -L --max-time 120 \
               "https://github.com/hiddify/hiddify-core/archive/refs/heads/main.tar.gz" \
               -o hiddify-core.tar.gz; then
              tar -xzf hiddify-core.tar.gz 2>/dev/null || true
              if [ -d "hiddify-core-main" ]; then
                cp -r hiddify-core-main/* libcore/ 2>/dev/null || true
                download_success=true
                echo "✅ Curl fallback successful"
              fi
              rm -rf hiddify-core.tar.gz hiddify-core-main
            fi
          fi
          
          # Verificar resultado
          if [ -d "libcore" ] && [ "$(ls -A libcore)" ]; then
            echo "✅ hiddify-core setup completed"
          else
            echo "⚠️ hiddify-core download failed, creating minimal structure..."
            mkdir -p libcore
            echo "# Placeholder for hiddify-core" > libcore/README.md
          fi
        fi
        
        echo "📊 libcore directory status:"
        ls -la libcore/ | head -10

    - name: Fix dependencies and prepare pubspec.yaml
      run: |
        echo "🔧 Checking and fixing dependencies..."
        
        if [ -f "pubspec.yaml" ]; then
          echo "✅ Found pubspec.yaml"
          
          # Hacer backup
          cp pubspec.yaml pubspec.yaml.backup
          
          # Verificar si existe tv_focus (que no es un paquete real)
          if grep -q "tv_focus" pubspec.yaml; then
            echo "⚠️ Found tv_focus dependency - this package doesn't exist"
            echo "🔧 Removing tv_focus dependency..."
            sed -i '/tv_focus/d' pubspec.yaml
            echo "✅ Removed tv_focus dependency"
          fi
          
          # Verificar otras dependencias problemáticas
          echo "🔍 Checking for other potential issues..."
          
          # Mostrar dependencias principales
          echo "📋 Current dependencies:"
          grep -A 20 "dependencies:" pubspec.yaml | head -25
          
        else
          echo "❌ pubspec.yaml not found!"
          exit 1
        fi

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: '11076708'
        accept-android-sdk-licenses: true

    - name: Install Android SDK components
      run: |
        echo "📱 Installing required Android SDK components..."
        
        # Verificar ANDROID_HOME
        if [ -z "$ANDROID_HOME" ]; then
          export ANDROID_HOME=$ANDROID_SDK_ROOT
        fi
        
        echo "ANDROID_HOME: $ANDROID_HOME"
        
        # Instalar componentes necesarios
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platforms;android-${{ env.ANDROID_API_LEVEL }}" \
          "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" \
          "platform-tools" \
          "extras;android;m2repository" \
          "extras;google;m2repository"
        
        echo "✅ Android SDK components installed"

    - name: Accept Android SDK licenses
      run: |
        echo "📄 Accepting Android SDK licenses..."
        yes | flutter doctor --android-licenses || true

    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Get Flutter dependencies
      run: |
        echo "📦 Getting Flutter dependencies..."
        
        # Limpiar cache si es necesario
        flutter clean
        
        # Obtener dependencias
        flutter pub get
        
        echo "✅ Flutter dependencies installed"

    - name: Run Flutter doctor
      run: |
        echo "🔍 Running Flutter doctor..."
        flutter doctor -v
        
        echo "🔧 Flutter version info:"
        flutter --version

    - name: Verify project structure
      run: |
        echo "📁 Verifying project structure..."
        
        echo "📋 Project root contents:"
        ls -la
        
        echo "📱 Android directory structure:"
        if [ -d "android" ]; then
          find android -name "*.gradle" -o -name "AndroidManifest.xml" | head -10
        else
          echo "❌ No android directory found"
        fi
        
        echo "📂 Lib directory structure:"
        if [ -d "lib" ]; then
          find lib -name "*.dart" | head -10
        else
          echo "❌ No lib directory found"
        fi

    - name: Prepare build environment
      run: |
        echo "🚀 Preparing build environment..."
        
        # Configurar variables de entorno
        export FLUTTER_BUILD_MODE=release
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export GRADLE_OPTS="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"
        
        echo "🔧 Build environment variables:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "GRADLE_OPTS: $GRADLE_OPTS"
        
        # Verificar espacio en disco
        echo "💾 Available disk space:"
        df -h

    - name: Build Android APK
      run: |
        echo "🔨 Building Android APK..."
        
        # Configurar variables de entorno
        export FLUTTER_BUILD_MODE=release
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export GRADLE_OPTS="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"
        
        # Estrategia de build múltiple
        build_success=false
        
        # Intento 1: Build estándar
        if ! $build_success; then
          echo "🔄 Attempting standard build..."
          if flutter build apk --release --target-platform android-arm64; then
            build_success=true
            echo "✅ Standard build successful"
          else
            echo "❌ Standard build failed"
          fi
        fi
        
        # Intento 2: Build con split-per-abi
        if ! $build_success; then
          echo "🔄 Attempting build with split-per-abi..."
          if flutter build apk --release --split-per-abi; then
            build_success=true
            echo "✅ Split-per-abi build successful"
          else
            echo "❌ Split-per-abi build failed"
          fi
        fi
        
        # Intento 3: Build solo para arm64
        if ! $build_success; then
          echo "🔄 Attempting arm64-only build..."
          if flutter build apk --release --target-platform android-arm64 --dart-define=FLUTTER_WEB_USE_SKIA=true; then
            build_success=true
            echo "✅ ARM64-only build successful"
          else
            echo "❌ ARM64-only build failed"
          fi
        fi
        
        # Verificar si el build fue exitoso
        if ! $build_success; then
          echo "❌ All build attempts failed!"
          echo "🔍 Checking for build errors..."
          
          # Buscar logs de error
          if [ -f "android/app/build/outputs/logs/manifest-merger-debug-report.txt" ]; then
            echo "📄 Manifest merger report:"
            cat android/app/build/outputs/logs/manifest-merger-debug-report.txt
          fi
          
          # Intentar build verbose como último recurso
          echo "🔄 Final attempt with verbose output..."
          flutter build apk --release --verbose
        fi

    - name: Locate and verify built APKs
      run: |
        echo "🔍 Locating built APK files..."
        
        # Buscar todos los APKs
        echo "📱 Searching for APK files..."
        apk_files=$(find . -name "*.apk" -type f 2>/dev/null || true)
        
        if [ -n "$apk_files" ]; then
          echo "✅ Found APK files:"
          echo "$apk_files" | while read -r apk; do
            if [ -f "$apk" ]; then
              size=$(ls -lh "$apk" | awk '{print $5}')
              echo "📱 $apk (Size: $size)"
              
              # Verificar que sea un APK válido
              if file "$apk" | grep -q "Android\|ZIP"; then
                echo "   ✅ Valid APK file"
              else
                echo "   ⚠️ Potentially invalid APK"
              fi
            fi
          done
          
          # Mostrar estructura de build outputs
          echo ""
          echo "📂 Build outputs structure:"
          if [ -d "build/app/outputs" ]; then
            find build/app/outputs -name "*.apk" -ls
          fi
          
        else
          echo "❌ No APK files found!"
          echo "🔍 Checking build directories..."
          find . -type d -name "*outputs*" -o -name "*apk*" | head -10
          
          echo "📂 Build directory contents:"
          if [ -d "build" ]; then
            find build -name "*.apk" -o -name "*.aab" | head -10
          fi
        fi

    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hiddify-android-apk-${{ github.run_number }}
        path: |
          build/app/outputs/flutter-apk/*.apk
          build/app/outputs/apk/**/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build/
          android/app/build/
          android/build/
          ~/.gradle/daemon/
          flutter_*.log
        retention-days: 7
        if-no-files-found: ignore

    - name: Build summary
      if: always()
      run: |
        echo "🏁 Build Summary"
        echo "==============="
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🔢 Run: ${{ github.run_number }}"
        echo "⏰ Date: $(date)"
        echo ""
        
        if [ -d "build/app/outputs" ]; then
          echo "📱 Generated APKs:"
          find build/app/outputs -name "*.apk" -exec basename {} \; | sort
          echo ""
          echo "📊 APK sizes:"
          find build/app/outputs -name "*.apk" -exec ls -lh {} \; | awk '{print $5 " " $9}'
        else
          echo "❌ No build outputs found"
        fi
        
        echo ""
        echo "🔗 Download artifacts from the Actions tab above"
